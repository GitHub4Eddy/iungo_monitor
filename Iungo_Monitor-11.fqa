{"name":"Iungo Monitor","type":"com.fibaro.powerSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_995"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_995"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"IPaddress","type":"string","value":"192.168.178.12"},{"name":"solarPanel","type":"string","value":"false"},{"name":"waterMeter","type":"string","value":"false"},{"name":"solarM2","type":"string","value":"0"},{"name":"interval","type":"string","value":"10"},{"name":"debugLevel","type":"string","value":"4"},{"name":"meterConsHigh","type":"string","value":"0"},{"name":"meterConsLow","type":"string","value":"0"},{"name":"meterProdHigh","type":"string","value":"0"},{"name":"meterProdLow","type":"string","value":"0"},{"name":"meterGas","type":"string","value":"0"},{"name":"meterWater","type":"string","value":"0"},{"name":"meterConsHighD","type":"string","value":"00-00-0000"},{"name":"meterConsLowD","type":"string","value":"00-00-0000"},{"name":"meterProdHighD","type":"string","value":"00-00-0000"},{"name":"meterProdLowD","type":"string","value":"00-00-0000"},{"name":"meterGasD","type":"string","value":"00-00-0000"},{"name":"meterWaterD","type":"string","value":"00-00-0000"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- IUNGO MONITOR \n\n-- This Quickapp retrieves power consumption, solar production, energy usage, gas usage and waterflow from the Iungo Monitor, Solarpanel and Watermeter\n\n-- (Child) Devices for Consumption, Production, Solar Power, Water Flow, Consumption High, Consumption Low, Production High, Production Low, Total Gas and Total Water FLow\n\n\n-- Version 1.1 (11th September 2021)\n-- Changed the Child Devices Consumption High, Consumption Low, Production High and Production Low to device type energyMeter to facilitate the new Energy Panel\n-- Added automaticaly change rateType interface of Child device Consumption High and Low to \"consumption\" and Production High and Low to \"production\"\n-- Changed the Main Device to device type powerSensor to show the power graphs\n-- Added Net Consumption to the value of the Main Device \n-- Changed the Child Devices Consumption, Production and Solar Power to device type powerSensor to show the power graphs \n-- Changed the Water Flow unit text from m³ to Litre\n-- Added the amount of m2 Solar Panels to the log text ot the Child Device Solar Power and to the labels\n-- Changed meterreading to automatically kWh, MWh of GWh\n-- Moved tarif informatie to main device log text\n-- Added Meter measurement for Consumption High, Consumption Low, Production High, Production Low, Gas and Water to reset the measurements\n-- Added Meter measurement Date for Consumption High, Consumption Low, Production High, Production Low, Gas and Water\n-- Removed Refresh button\n-- Added some extra debug information when debug level = 3\n\n\n\n-- Version 1.0 (6th February 2021)\n-- Now also supports Iungo Solarpanel and Iungo Watermeter\n-- Added a lot of Child devices\n-- Added QuickApp Variable for user defined icon Mother Device\n-- Added QuickApp Variable for Solar Power m2\n-- Removed calculation and storage of energy consumption of Fibaro devices\n\n-- Version 0.6 (22th January 2021)\n-- Now also supports Iungo basic version\n\n-- Version 0.5 (21th January 2021)\n-- Initial version\n\n\n-- Variables (mandatory and automaticaly generated): \n-- IPaddress = IP address of your Iungo Monitor\n-- solarPanel = true or false for use of the SolarPanel module (default is false)\n-- waterMeter = true or false for use of the Watermeter module (default is false)\n-- interval = Number in seconds, the Lungo Monitor normally is updated every 10 seconds\n-- solarM2 = The amount of m2 Solar Panels (use . for decimals) for calculating Solar Power m2\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n-- meterConsHigh = Last meter measurement Consumption High\n-- meterConsLow = Last meter measurement Consumption Low\n-- meterProdHigh = Last meter measurement Production High \n-- meterProdLow = Last meter measurement Production Low \n-- meterGas = Last meter measurement Gas \n-- meterWater = Last meter measurement Water \n-- meterConsHighD = Date last meter measurement Consumption High\n-- meterConsLowD = Date last meter measurement Consumption Low\n-- meterProdHighD = Date last meter measurement Production High \n-- meterProdLowD = Date last meter measurement Production Low \n-- meterGasD = Date last meter measurement Gas \n-- meterWaterD = Date last meter measurement Water \n\n\n\n-- No editing of this code is needed \n\n\nclass 'consumption'(QuickAppChild)\nfunction consumption:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Consumption QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.0f\", data.consumption)))\n  self:updateProperty(\"power\", tonumber(string.format(\"%.0f\", data.consumption)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'production'(QuickAppChild)\nfunction production:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Production QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.0f\", data.solar)))\n  self:updateProperty(\"power\", tonumber(string.format(\"%.0f\", data.solar)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", data.meterreading ..\" \" ..data.meterreadingUnit)\nend\n\n\nclass 'solarPower'(QuickAppChild)\nfunction solarPower:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"solarPower QuickappChild initiated, deviceId:\",self.id)\nend\nfunction solarPower:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.solarPower))\n  self:updateProperty(\"power\", tonumber(data.solarPower))\n  self:updateProperty(\"unit\", \"Watt/m²\")\n  self:updateProperty(\"log\", solarM2 ..\" m² panels\")\nend\n\n\nclass 'waterflow'(QuickAppChild)\nfunction waterflow:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"Waterflow QuickappChild initiated, deviceId:\",self.id)\nend\nfunction waterflow:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.0f\",data.flow)))\n  self:updateProperty(\"unit\", \"Litre\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'consumption_high'(QuickAppChild)\nfunction consumption_high:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_high QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n    self:updateProperty(\"rateType\", \"consumption\")\n    self:warning(\"Changed rateType interface of Consumption High child device (\" ..self.id ..\") to consumption\")\n  end\nend\nfunction consumption_high:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_high)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", meterConsHighD)\nend\n\n\nclass 'consumption_low'(QuickAppChild)\nfunction consumption_low:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_low QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n    self:updateProperty(\"rateType\", \"consumption\")\n    self:warning(\"Changed rateType interface of Consumption High child device (\" ..self.id ..\") to consumption\")\n  end\nend\nfunction consumption_low:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.consumption_low)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", meterConsLowD)\nend\n\n\nclass 'production_high'(QuickAppChild)\nfunction production_high:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_high QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of Production High child device (\" ..self.id ..\") to production\")\n  end\nend\nfunction production_high:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_high)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", meterProdHighD)\nend\n\n\nclass 'production_low'(QuickAppChild)\nfunction production_low:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_low QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of Production High child device (\" ..self.id ..\") to production\")\n  end\nend\nfunction production_low:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.production_low)))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", meterProdLowD)\nend\n\n\nclass 'gas'(QuickAppChild)\nfunction gas:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"gas QuickappChild initiated, deviceId:\",self.id)\nend\nfunction gas:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.gas)))\n  self:updateProperty(\"unit\", \"m³\")\n  self:updateProperty(\"log\", meterGasD)\nend\n\n\nclass 'total_waterflow'(QuickAppChild)\nfunction total_waterflow:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"total_waterflow QuickappChild initiated, deviceId:\",self.id)\nend\nfunction total_waterflow:updateValue(data) \n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.wused)))\n  self:updateProperty(\"unit\", \"m³\")\n  self:updateProperty(\"log\", meterWaterD)\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp Functions\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n    self:debug(text)\n  end\nend\n\n\nfunction QuickApp:solarPower(power, m2) -- Calculate Solar Power M2\n  self:logging(3,\"Start solarPower\")\n  if m2 > 0 and power > 0 then\n    solarPower = power / m2\n  else\n    solarPower = 0\n  end\n  return solarPower\nend\n\n\nfunction QuickApp:unitCheckWh(measurement) -- Set the measurement and unit to Wh, kWh, MWh or GWh\n  self:logging(3,\"Start unitCheckWh\")\n  if measurement > 1000000000 then\n    return string.format(\"%.2f\",measurement/1000000000),\"GWh\"\n  elseif measurement > 1000000 then\n    return string.format(\"%.2f\",measurement/1000000),\"MWh\"\n  elseif measurement > 1000 then\n    return string.format(\"%.2f\",measurement/1000),\"kWh\"\n  else\n    return string.format(\"%.0f\",measurement),\"Wh\"\n  end\nend\n\n\nfunction QuickApp:recalcMeter(meter,reading) -- Recalculate meter readings\n  self:logging(3,\"QuickApp:recalcMeter\")\n  self:logging(3,\"meter: \" ..meter)\n  self:logging(3,\"reading: \" ..reading)\n  if tonumber(meter) > 0 and tonumber(meter) < tonumber(reading) then\n    return string.format(\"%.3f\",reading - meter)\n  end\n  return string.format(\"%.3f\",reading)\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"QuickApp:updateProperties\")\n  self:updateProperty(\"value\", tonumber(string.format(\"%.3f\",data.net_consumption)))\n  self:updateProperty(\"power\", tonumber(string.format(\"%.3f\",data.net_consumption)))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"Tarif: \" ..data.tarifcodeText)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels \n  self:logging(3,\"QuickApp:updateLabels\")\n  local labelText = \"\"\n  if solarPanel then\n    labelText = labelText ..\"Net Consumption: \" ..data.net_consumption ..\" Watt / tarif: (\" ..data.tarifcodeText ..\")\" ..\"\\n\"\n    labelText = labelText ..\"House Consumption: \" ..data.consumption ..\" Watt\" ..\"\\n\"\n    labelText = labelText ..\"Solar Production: \" ..data.solar ..\" Watt\" ..\"\\n\"\n  else\n    labelText = labelText ..\"Consumption: \" ..data.consumption ..\" Watt / tarif: (\" ..data.tarifcodeText ..\")\" ..\"\\n\"\n  end\n  labelText = labelText ..\"\\n\" ..\"Totals:\" ..\"\\n\"\n  labelText = labelText ..\"Consumption high: \" ..data.consumption_high ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Consumption low: \" ..data.consumption_low ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Consumption total: \" ..data.total_consumption ..\" kWh\" ..\"\\n\" \n  if solarPanel then\n    labelText = labelText ..\"Solar Meterreading: \" ..data.meterreading ..\" \" ..data.meterreadingUnit ..\"\\n\"\n  end\n  labelText = labelText ..\"Production high: \" ..data.production_high ..\" kWh\" ..\"\\n\" \n  labelText = labelText ..\"Producton low: \" ..data.production_low ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Production total: \" ..data.total_production ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Gas: \" ..data.gas ..\" m³\" ..\"\\n\"\n  if waterMeter then\n    labelText = labelText ..\"Water: \" ..data.wused ..\" m³\" ..\"\\n\"\n  end\n  if solarPanel then\n    labelText = labelText ..\"\\n\" ..\"Solar:\" ..\"\\n\"\n    labelText = labelText ..\"Production: \" ..data.solar ..\" Watt\" ..\"\\n\"\n    labelText = labelText ..\"Panels: \" ..solarM2 ..\" m²\" ..\"\\n\"\n    labelText = labelText ..\"Power: \" ..data.solarPower ..\" Watt/m²\" ..\"\\n\"\n  end\n  if waterMeter then\n    labelText = labelText ..\"\\n\" ..\"Water:\" ..\"\\n\"\n    labelText = labelText ..\"Waterflow: \" ..data.flow ..\" Litre\" ..\"\\n\"\n  end\n  \n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:valuesWater() -- Update the Water values from json file\n  self:logging(3,\"QuickApp:valuesWater\")\n  data.flow = jsonTableWater.rv.propsval[2].value\n  data.pulstotal = jsonTableWater.rv.propsval[3].value\n  data.kfact = jsonTableWater.rv.propsval[4].value \n  data.offset = jsonTableWater.rv.propsval[5].value\n  data.wused = string.format(\"%.3f\",data.pulstotal/data.kfact+data.offset)\n  data.wused = self:recalcMeter(meterWater, data.wused)\nend\n\n\nfunction QuickApp:valuesSolar() -- Update the Solar values from json file\n  self:logging(3,\"QuickApp:valuesSolar\")\n  data.solar = string.format(\"%.1f\",jsonTableSolar.rv.propsval[2].value)\n  data.pulstotal = string.format(\"%.3f\",jsonTableSolar.rv.propsval[3].value)\n  data.ppkwh = string.format(\"%.3f\",jsonTableSolar.rv.propsval[4].value)\n  data.offset = string.format(\"%.3f\",jsonTableSolar.rv.propsval[5].value)\n  data.meterreading = string.format(\"%.3f\",tonumber(data.pulstotal)/tonumber(data.ppkwh)+tonumber(data.offset)) -- Calculate meterreading\n  data.meterreading, data.meterreadingUnit = self:unitCheckWh(tonumber(data.meterreading)) -- Set measurement and unit to Wh, kWh, MWh or GWh\n  data.solarPower = string.format(\"%.2f\",self:solarPower(tonumber(data.solar), tonumber(solarM2)))\n  data.net_consumption = tonumber(data.consumption) - tonumber(data.solar) -- Calculate net_consumption\nend\n\n\nfunction QuickApp:valuesMonitor() -- Update the Monitor values from json file\n  self:logging(3,\"QuickApp:valuesMonitor\")\n  local n = 29\n  local i = 1\n  for i=1,n do\n    --self:logging(4,jsonTableMonitor.rv.propsval[i].id ..\" \" ..jsonTableMonitor.rv.propsval[i].value)\n    if jsonTableMonitor.rv.propsval[i].id == \"usage\" then\n      data.consumption = string.format(\"%.1f\",jsonTableMonitor.rv.propsval[i].value)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"T1\" then\n      data.consumption_low = string.format(\"%.3f\",jsonTableMonitor.rv.propsval[i].value)\n      data.consumption_low = self:recalcMeter(meterConsLow, data.consumption_low)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"T2\" then\n      data.consumption_high = string.format(\"%.3f\",jsonTableMonitor.rv.propsval[i].value)\n      data.consumption_high = self:recalcMeter(meterConsHigh, data.consumption_high)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"-T1\" then\n      data.production_low = string.format(\"%.3f\",jsonTableMonitor.rv.propsval[i].value)\n      data.production_low = self:recalcMeter(meterProdLow, data.production_low)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"-T2\" then\n      data.production_high = string.format(\"%.3f\",jsonTableMonitor.rv.propsval[i].value)\n      data.production_high = self:recalcMeter(meterProdHigh, data.production_high)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"gas_usage\" then\n      data.consumption_gas = string.format(\"%.3f\",jsonTableMonitor.rv.propsval[i].value)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"gas\" then\n      data.gas = string.format(\"%.3f\",jsonTableMonitor.rv.propsval[i].value)\n      data.gas = self:recalcMeter(meterGas, data.gas)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"c_tariff\" then\n      data.tarifcode = tostring(jsonTableMonitor.rv.propsval[i].value)\n    elseif jsonTableMonitor.rv.propsval[i].id == \"Gas-interval\" then\n      data.net_consumption = tonumber(data.consumption) - tonumber(data.solar) -- Initial calculation without Solar Panel\n      data.total_consumption = tonumber(data.consumption_low) + tonumber(data.consumption_high)\n      data.total_production = tonumber(data.production_low) + tonumber(data.production_high)\n\n      if data.tarifcode == \"2\" then \n        data.tarifcodeText = \"high\"\n      elseif data.tarifcode == \"1\" then\n        data.tarifcodeText = \"low\"\n      else\n        data.tarifcodeText = \"\"\n      end\n      return \"\"\n    else\n      --self:warning(\"Unknown measurement value\")\n    end\n  end\nend \n\n\nfunction QuickApp:getData() -- Get data from Iungo Monitor, Solar, Water\n  self:logging(3,\"QuickApp:getData\")\n  local url = \"http://\" ..IPaddress ..Path\n  self:logging(3,\"url: \" ..url)\n  self:logging(3,\"currentMethod: \" ..currentMethod)\n  \n  self.http:request(url, {\n  options = {\n    data = currentMethod,\n    method = \"POST\",\n    headers = {\n      [\"Content-Type\"] = \"application/json\",\n      [\"Accept\"] = \"application/json\",\n      }\n    },\n    success = function(response) \n      self:logging(3,\"Response status: \" ..response.status)\n      --self:logging(3,\"Response data: \" ..response.data)\n      apiResult =  response.data\n\n      if monitorToggle then\n        jsonTableMonitor = json.decode(apiResult) -- Decode the json string from api to lua-table Monitor\n        self:logging(3,\"Start getValuesMonitor\")\n        self:valuesMonitor() -- Get the values from Monitor json file\n        self:logging(3,\"Start updateLabels\")\n        self:updateLabels() -- Update the labels\n        self:logging(3,\"Start updateProperties\")\n        self:updateProperties() -- Update the propterties\n        self:logging(3,\"Start updateChildDevices\")\n        self:updateChildDevices() -- Update the Child Devices\n        if solarPanel then\n          monitorToggle = false\n          solarToggle = true\n          waterToggle = false\n          currentMethod = methodSolar\n        elseif waterMeter then\n          monitorToggle = false\n          solarToggle = false\n          waterToggle = true\n          currentMethod = methodWater\n        end\n\n      elseif solarToggle then\n        jsonTableSolar = json.decode(apiResult) -- Decode the json string lua-table Solarpanel\n        self:logging(3,\"Start getValuesSolar\")\n        self:valuesSolar() -- Get the values from Solar json file\n        self:logging(3,\"Start updateLabels\")\n        self:updateLabels() -- Update the labels\n        self:logging(3,\"Start updateProperties\")\n        self:updateProperties() -- Update the propterties\n        self:logging(3,\"Start updateChildDevices\")\n        self:updateChildDevices() -- Update the Child Devices\n        if waterMeter then \n          monitorToggle = false\n          solarToggle = false\n          waterToggle = true\n          currentMethod = methodWater\n        else\n          monitorToggle = true\n          solarToggle = false\n          waterToggle = false\n          currentMethod = methodMonitor\n        end\n\n      elseif waterToggle then\n        jsonTableWater = json.decode(apiResult) -- Decode the json string lua-table Watermeter\n        self:logging(3,\"Start getValuesWater\")\n        self:valuesWater() -- Get the values from Water json file\n        self:logging(3,\"Start updateLabels\")\n        self:updateLabels() -- Update the labels\n        self:logging(3,\"Start updateChildDevices\")\n        self:updateChildDevices() -- Update the Child Devices\n        monitorToggle = true\n        solarToggle = false\n        waterToggle = false\n        currentMethod = methodMonitor\n\n      else\n        self:warning(\"No toggle Monitor, Solar or Water active\")\n        return\n      end\n\n    end,\n    error = function(message)\n      self:logging(3,\"error: \" ..message)\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n  })\n  self:logging(3,\"Start setTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() -- Checks every [interval] seconds for new data\n    self:getData()\n  end)\nend \n\n\nfunction QuickApp:simData() -- Simulate Iungo Monitor, Solar, Water\n  self:logging(3,\"QuickApp:simData\")\n  if monitorToggle then\n    apiResult = '{\"ok\":true,\"type\":\"response\",\"time\":0.0026875899638981,\"rv\":{\"propsval\":[{\"id\":\"name\",\"value\":\"EnergieDirect\"},{\"id\":\"metertype\",\"value\":\"XMX\"},{\"id\":\"version\",\"value\":\"5\"},{\"id\":\"serial_e\",\"value\":\"4999999999999999999999999999999996\"},{\"id\":\"usage\",\"value\":516},{\"id\":\"T1\",\"value\":10817.833},{\"id\":\"T2\",\"value\":5398.875},{\"id\":\"-T1\",\"value\":4379.797},{\"id\":\"-T2\",\"value\":9959.182},{\"id\":\"L1I\",\"value\":1},{\"id\":\"L2I\",\"value\":1},{\"id\":\"L3I\",\"value\":2},{\"id\":\"L1Pimp\",\"value\":0.054},{\"id\":\"L2Pimp\",\"value\":0.125},{\"id\":\"L3Pimp\",\"value\":0.336},{\"id\":\"L1Pexp\",\"value\":0},{\"id\":\"L2Pexp\",\"value\":0},{\"id\":\"L3Pexp\",\"value\":0},{\"id\":\"c_tariff\",\"value\":2},{\"id\":\"serial_g\",\"value\":\"4999999999999999999999999999999995\"},{\"id\":\"gas_usage\",\"value\":0},{\"id\":\"gas\",\"value\":3903.388},{\"id\":\"Cost-T1\",\"value\":0.20721},{\"id\":\"Cost-T2\",\"value\":0.22921},{\"id\":\"Cost-nT1\",\"value\":0.20721},{\"id\":\"Cost-nT2\",\"value\":0.22921},{\"id\":\"Cost-gas\",\"value\":0.7711},{\"id\":\"Gas-interval\",\"value\":3600},{\"id\":\"Client-blob\",\"value\":\"\"},{\"id\":\"available\",\"value\":true}]},\"systime\":1610986159,\"seq\":1,\"error\":false}' -- Iungo Monitor Light version\n    --apiResult =  '{\"ok\":true,\"type\":\"response\",\"time\":0.0039377399953082,\"rv\":{\"propsval\":[{\"id\":\"name\",\"value\":\"Kosten\"},{\"id\":\"metertype\",\"value\":\"Ene\"},{\"id\":\"version\",\"value\":\"5\"},{\"id\":\"serial_e\",\"value\":\"4999999999999999999999999999999997\"},{\"id\":\"usage\",\"value\":489},{\"id\":\"T1\",\"value\":8945.53},{\"id\":\"T2\",\"value\":4963.677},{\"id\":\"-T1\",\"value\":2051.765},{\"id\":\"-T2\",\"value\":6024.202},{\"id\":\"L1I\",\"value\":3},{\"id\":\"L1Pimp\",\"value\":0.489},{\"id\":\"L1Pexp\",\"value\":0},{\"id\":\"c_tariff\",\"value\":1},{\"id\":\"serial_g\",\"value\":\"4999999999999999999999999999999997\"},{\"id\":\"gas_usage\",\"value\":0},{\"id\":\"gas\",\"value\":3143.767},{\"id\":\"Cost-T1\",\"value\":0.18875},{\"id\":\"Cost-T2\",\"value\":0.18875},{\"id\":\"Cost-nT1\",\"value\":0.18875},{\"id\":\"Cost-nT2\",\"value\":0.18875},{\"id\":\"Cost-gas\",\"value\":0.64413},{\"id\":\"Gas-interval\",\"value\":300},{\"id\":\"Client-blob\",\"value\":\"\"},{\"id\":\"available\",\"value\":true}]},\"systime\":1611347255,\"seq\":1,\"error\":false}' -- Iungo Monitor Basic version    \n    jsonTableMonitor = json.decode(apiResult) -- Decode the json string from api to lua-table Monitor\n    self:logging(3,\"Start getValuesMonitor\")\n    self:valuesMonitor() -- Get the values from Monitor json file\n    self:logging(3,\"Start updateLabels\")\n    self:updateLabels() -- Update the labels\n    self:logging(3,\"Start updateProperties\")\n    self:updateProperties() -- Update the propterties\n    self:logging(3,\"Start updateChildDevices\")\n    self:updateChildDevices() -- Update the Child Devices\n    if solarPanel then\n      monitorToggle = false\n      solarToggle = true\n      waterToggle = false\n      currentMethod = methodSolar\n    elseif waterMeter then\n      monitorToggle = false\n      solarToggle = false\n      waterToggle = true\n      currentMethod = methodWater\n    end\n  \n  elseif solarToggle then\n    apiResult = '{\"ok\":true,\"type\":\"response\",\"time\":0.0016563490498811,\"rv\":{\"propsval\":[{\"id\":\"name\",\"value\":\"20 panelen\"},{\"id\":\"solar\",\"value\":500.4},{\"id\":\"pulstotal\",\"value\":16575341},{\"id\":\"ppkwh\",\"value\":800},{\"id\":\"offset\",\"value\":292.07},{\"id\":\"connection\",\"value\":\"breakout\"},{\"id\":\"functiongroup\",\"value\":\"solar\"}]},\"systime\":1611237657,\"seq\":1,\"error\":false}' -- Iungo Solarpanel    \n    jsonTableSolar = json.decode(apiResult) -- Decode the json string lua-table Solarpanel\n    self:logging(3,\"Start getValuesSolar\")\n    self:valuesSolar() -- Get the values from Solar json file\n    self:logging(3,\"Start updateLabels\")\n    self:updateLabels() -- Update the labels\n    self:logging(3,\"Start updateChildDevices\")\n    self:updateChildDevices() -- Update the Child Devices\n    if waterMeter then \n      monitorToggle = false\n      solarToggle = false\n      waterToggle = true\n      currentMethod = methodWater\n    else\n      monitorToggle = true\n      solarToggle = false\n      waterToggle = false\n      currentMethod = methodMonitor\n    end\n\n  elseif waterToggle then\n    apiResult = '{\"ok\":true,\"type\":\"response\",\"time\":0.0010625629220158,\"rv\":{\"propsval\":[{\"id\":\"name\",\"value\":\"Water\"},{\"id\":\"flow\",\"value\":2},{\"id\":\"pulstotal\",\"value\":456523},{\"id\":\"kfact\",\"value\":1000},{\"id\":\"offset\",\"value\":-47.091},{\"id\":\"tariff\",\"value\":0.9616},{\"id\":\"connection\",\"value\":\"breakout_ch2\"}]},\"systime\":1611765184,\"seq\":1,\"error\":false}' -- Iungo Watermeter    \n    jsonTableWater = json.decode(apiResult) -- Decode the json string lua-table Watermeter\n    self:logging(3,\"Start getValuesWater\")\n    self:valuesWater() -- Get the values from Water json file\n    self:logging(3,\"Start updateLabels\")\n    self:updateLabels() -- Update the labels\n    self:logging(3,\"Start updateChildDevices\")\n    self:updateChildDevices() -- Update the Child Devices\n    monitorToggle = true\n    solarToggle = false\n    waterToggle = false\n    currentMethod = methodMonitor\n  else\n    self:warning(\"No toggle Monitor, Solar or Water active\")\n    return\n  end\n\n  self:logging(3,\"Start setTimeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() -- Checks every [interval] seconds for new data\n    self:simData()\n  end)\nend \n\n\nfunction QuickApp:createVariables() -- Create Variables\n  monitorToggle = true\n  solarToggle = false\n  waterToggle = false\n  Path = \"/iungo/api_request\" -- Default Path\n  methodMonitor = '{\"seq\":1,\"method\":\"object_list_props_values\",\"arguments\":{\"oid\":\"538d72d9\"}}' -- Default Method for Iungo Monitor\n  methodSolar = '{\"seq\":1,\"method\":\"object_list_props_values\",\"arguments\":{\"oid\":\"95778a43\"}}' -- Default Method for Iungo Solarpanel\n  methodWater = '{\"seq\":1,\"method\":\"object_list_props_values\",\"arguments\":{\"oid\":\"82ec52ad\"}}' -- Default Method for Iungo Watermeter\n  currentMethod = methodMonitor -- Set default Method to Iungo Monitor Method\n  \n  data = {}\n  data.net_consumption = \"0\"\n  data.house_consumption = \"0\"\n  data.consumption = \"0\" \n  data.consumption_low = \"0\" \n  data.consumption_high = \"0\" \n  data.production_low = \"0\" \n  data.production_high = \"0\" \n  data.consumption_gas = \"0\" \n  data.gas = \"0\" \n  data.tarifcode = \"\"\n  data.total_consumption = \"0\"  \n  data.total_production = \"0\" \n  \n  data.solar = \"0\"\n  data.solarPower = \"0\" \n  data.tarifcodeText = \" \"\n  data.meterreading = \"0\"\n  data.meterreadingUnit = \"\"\n  \n  data.flow = \"0\"\n  data.wused = \"0\"\n  data.pulstotal = \"0\"\n  data.ppkwh = \"0\"\n  data.offset = \"0\"\n  data.flow = \"0\"\n  data.kfact = \"0\"\n  \nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all getQuickApp Variables or create them\n  IPaddress = self:getVariable(\"IPaddress\")\n  solarPanel = string.lower(self:getVariable(\"solarPanel\"))\n  waterMeter = string.lower(self:getVariable(\"waterMeter\"))\n  solarM2 = tonumber(self:getVariable(\"solarM2\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n  meterConsHigh = tonumber(self:getVariable(\"meterConsHigh\"))\n  meterConsHighD = self:getVariable(\"meterConsHighD\")\n  meterConsLow = tonumber(self:getVariable(\"meterConsLow\"))\n  meterConsLowD = self:getVariable(\"meterConsLowD\")\n  meterProdHigh = tonumber(self:getVariable(\"meterProdHigh\"))\n  meterProdHighD = self:getVariable(\"meterProdHighD\")\n  meterProdLow = tonumber(self:getVariable(\"meterProdLow\"))\n  meterProdLowD = self:getVariable(\"meterProdLowD\")\n  meterGas = tonumber(self:getVariable(\"meterGas\"))\n  meterGasD = self:getVariable(\"meterGasD\")\n  meterWater = tonumber(self:getVariable(\"meterWater\"))\n  meterWaterD = self:getVariable(\"meterWaterD\")\n\n\n  -- Check existence of the mandatory variables, if not, create them with default values \n  if IPaddress == \"\" or IPaddress == nil then \n    IPaddress = \"192.168.178.12\" -- Default IPaddress of Iungo Monitor\n    self:setVariable(\"IPaddress\", IPaddress)\n    self:trace(\"Added QuickApp variable IPaddress\")\n  end\n  if solarPanel == \"\" or solarPanel == nil then \n    solarPanel = \"false\" -- Default availability of solarPanel is \"false\"\n    self:setVariable(\"solarPanel\",solarPanel)\n    self:trace(\"Added QuickApp variable solarPanel\")\n  end  \n  if waterMeter == \"\" or waterMeter == nil then \n    waterMeter = \"false\" -- Default availability of waterMeter is \"false\"\n    self:setVariable(\"waterMeter\",waterMeter)\n    self:trace(\"Added QuickApp variable waterMeter\")\n  end  \n  if solarM2 == \"\" or solarM2 == nil then \n    solarM2 = \"0\" -- How much m2 Solar Panels, default is 0\n    self:setVariable(\"solarM2\",solarM2)\n    self:trace(\"Added QuickApp variable solarM2\")\n  end\n  if interval == \"\" or interval == nil then\n    interval = \"10\" -- Default interval in seconds (The Iungo meter normally reads every 10 seconds)\n    self:setVariable(\"interval\", interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel is \"1\"\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if meterConsHigh == \"\" or meterConsHigh == nil then \n    meterConsHigh = \"0\" \n    self:setVariable(\"meterConsHigh\", meterConsHigh)\n    self:trace(\"Added QuickApp variable meterConsHigh\")\n    meterConsHigh = tonumber(meterConsHigh)\n  end\n  if meterConsLow == \"\" or meterConsLow == nil then \n    meterConsLow = \"0\" \n    self:setVariable(\"meterConsLow\", meterConsLow)\n    self:trace(\"Added QuickApp variable meterConsLow\")\n    meterConsLow = tonumber(meterConsLow)\n  end  \n  if meterProdHigh == \"\" or meterProdHigh == nil then \n    meterProdHigh = \"0\" \n    self:setVariable(\"meterProdHigh\", meterProdHigh)\n    self:trace(\"Added QuickApp variable meterProdHigh\")\n    meterProdHigh = tonumber(meterProdHigh)\n  end \n  if meterProdLow == \"\" or meterProdLow == nil then \n    meterProdLow = \"0\" \n    self:setVariable(\"meterProdLow\", meterProdLow)\n    self:trace(\"Added QuickApp variable meterProdLow\")\n    meterProdLow = tonumber(meterProdLow)\n  end   \n  if meterGas == \"\" or meterGas == nil then \n    meterGas = \"0\" \n    self:setVariable(\"meterGas\", meterGas)\n    self:trace(\"Added QuickApp variable meterGas\")\n    meterGas = tonumber(meterGas)\n  end   \n  if meterWater == \"\" or meterWater == nil then \n    meterWater = \"0\" \n    self:setVariable(\"meterWater\", meterWater)\n    self:trace(\"Added QuickApp variable meterWater\")\n    meterWater = tonumber(meterWater)\n  end  \n  if meterConsHighD == \"\" or meterConsHighD == nil then \n    meterConsHighD = \"00-00-0000\" \n    self:setVariable(\"meterConsHighD\", meterConsHighD)\n    self:trace(\"Added QuickApp variable meterConsHighD\")\n  end\n  if meterConsLowD == \"\" or meterConsLowD == nil then \n    meterConsLowD = \"00-00-0000\" \n    self:setVariable(\"meterConsLowD\", meterConsLowD)\n    self:trace(\"Added QuickApp variable meterConsLowD\")\n  end  \n  if meterProdHighD == \"\" or meterProdHighD == nil then \n    meterProdHighD = \"00-00-0000\" \n    self:setVariable(\"meterProdHighD\", meterProdHighD)\n    self:trace(\"Added QuickApp variable meterProdHighD\")\n  end \n  if meterProdLowD == \"\" or meterProdLowD == nil then \n    meterProdLowD = \"00-00-0000\" \n    self:setVariable(\"meterProdLowD\", meterProdLowD)\n    self:trace(\"Added QuickApp variable meterProdLowD\")\n  end   \n  if meterGasD == \"\" or meterGasD == nil then \n    meterGasD = \"00-00-0000\" \n    self:setVariable(\"meterGasD\", meterGasD)\n    self:trace(\"Added QuickApp variable meterGasD\")\n  end   \n  if meterWaterD == \"\" or meterWaterD == nil then \n    meterWaterD = \"00-00-0000\" \n    self:setVariable(\"meterWaterD\", meterWaterD)\n    self:trace(\"Added QuickApp variable meterWaterD\")\n  end  \n  \n  if solarPanel == \"true\" then \n    solarPanel = true \n  else\n    solarPanel = false\n  end\n\n  if waterMeter == \"true\" then \n    waterMeter = true \n  else\n    waterMeter = false\n  end\n\n  if solarPanel and waterMeter then\n    interval = tonumber(string.format(\"%.3f\", interval / 3))\n  elseif solarPanel or waterMeter then\n    interval = tonumber(string.format(\"%.3f\", interval / 2))\n  end\n  self:logging(3,\"Interval: \" ..tostring(interval))\n\n  if meterConsHighD == \" 0\" or meterConsHighD == \"00-00-0000\" then\n    meterConsHighD = \"\"\n  else \n    meterConsHighD = \"Since: \" ..meterConsHighD\n  end\n  if meterConsLowD == \" 0\" or meterConsLowD == \"00-00-0000\" then\n    meterConsLowD = \"\"\n  else \n    meterConsLowD = \"Since: \" ..meterConsLowD\n  end\n  if meterProdHighD == \" 0\" or meterProdHighD == \"00-00-0000\" then\n    meterProdHighD = \"\"\n  else \n    meterProdHighD = \"Since: \" ..meterProdHighD\n  end\n  if meterProdLowD == \" 0\" or meterProdLowD == \"00-00-0000\" then\n    meterProdLowD = \"\"\n  else \n    meterProdLowD = \"Since: \" ..meterProdLowD\n  end\n  if meterGasD == \" 0\" or meterGasD == \"00-00-0000\" then\n    meterGasD = \"\"\n  end\n  if meterWaterD == \" 0\" or meterWaterD == \"00-00-0000\" then\n    meterWaterD = \"\"\n  else \n    meterWaterD = \"Since: \" ..meterWaterD\n  end\n\nend\n\n\nfunction QuickApp:updateChildDevices()\n  for id,child in pairs(self.childDevices) do -- Update Child Devices\n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:setupChildDevices() -- Setup Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"consumption\", name=\"Consumption\", type=\"com.fibaro.powerSensor\", value=0},\n      {className=\"production\", name=\"Production\", type=\"com.fibaro.powerSensor\", value=0},\n      {className=\"solarPower\", name=\"Solar Power\", type=\"com.fibaro.powerSensor\", value=0},\n      {className=\"waterflow\", name=\"Water Flow\", type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"consumption_high\", name=\"Consumption High\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"consumption_low\", name=\"Consumption Low\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"production_high\", name=\"Production High\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"production_low\", name=\"Production Low\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"gas\", name=\"Total Gas\", type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"total_waterflow\", name=\"Total Water Flow\", type=\"com.fibaro.multilevelSensor\", value=0},\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit() -- Let's get started\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"onInit\")\n  self:debug(\"Start setupChildDevices\")\n  self:setupChildDevices()\n  self:debug(\"Start getQuickAppVariables\")\n  self:getQuickAppVariables() -- Get QuickApp Variables\n  self:logging(3,\"Start variables\")\n  self:createVariables() -- Create all Variables\n\n  self.http = net.HTTPClient({timeout=3000})\n  \n  if tonumber(debugLevel) >= 4 then \n    self:logging(3,\"Start simData\")\n    self:simData() -- Go in simulation\n  else\n    self:logging(3,\"Start getData\")\n    self:getData() -- Get data from Iungo Monitor, Solarpanel, Watermeter\n  end\nend\n\n-- EOF  "}]}